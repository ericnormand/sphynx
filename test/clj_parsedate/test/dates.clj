(ns clj-parsedate.test.dates
  (:use clj-parsedate.parsedatetime)
  (:use [clojure.test])
  (:import [org.joda.time DateTime Duration Seconds]))

(defn within-one-sec [d1 d2]
  (let [dur (Duration. d1 d2)]
    (-> dur
        (.getStandardSeconds)
        (Math/abs)
        (< 1))))

(deftest test-table
  
  (is (within-one-sec (parsedatetime nil) (DateTime.)))
  (is (within-one-sec (parsedatetime "")  (DateTime.)))
  (is (within-one-sec (parsedatetime "  ") (DateTime.)))
  (is (within-one-sec (parsedatetime "now") (DateTime.)))
  (is (within-one-sec (parsedatetime "yesterday") (.minus (DateTime.) (Duration/standardDays 1))))
  (is (within-one-sec (parsedatetime "11am") (-> (DateTime.)
                                                 (.withHourOfDay 11)
                                                 (.withMinuteOfHour 0)
                                                 (.withSecondOfMinute 0)
                                                 (.withMillisOfSecond 0))))
  (is (within-one-sec (parsedatetime "4pm") (-> (DateTime.)
                                                (.withHourOfDay 16)
                                                (.withMinuteOfHour 0)
                                                (.withSecondOfMinute 0)
                                                (.withMillisOfSecond 0))))
  (is (within-one-sec (parsedatetime "4 pm") (-> (DateTime.)
                                                 (.withHourOfDay 16)
                                                 (.withMinuteOfHour 0)
                                                 (.withSecondOfMinute 0)
                                                 (.withMillisOfSecond 0))))
  (is (within-one-sec (parsedatetime "4 am") (-> (DateTime.)
                                                 (.withHourOfDay 4)
                                                 (.withMinuteOfHour 0)
                                                 (.withSecondOfMinute 0)
                                                 (.withMillisOfSecond 0))))
  (is (within-one-sec (parsedatetime "9:45am") (-> (DateTime.)
                                                   (.withHourOfDay 9)
                                                   (.withMinuteOfHour 45)
                                                   (.withSecondOfMinute 0)
                                                   (.withMillisOfSecond 0))))
  (is (within-one-sec (parsedatetime "yesterday 11:45pm")
                      (-> (DateTime.)
                          (.minusDays 1)
                          (.withHourOfDay 23)
                          (.withMinuteOfHour 45)
                          (.withSecondOfMinute 0)
                          (.withMillisOfSecond 0))))
  (is (within-one-sec (parsedatetime "two months ago")
                      (-> (DateTime.)
                          (.minusMonths 2))))
  (is (within-one-sec (parsedatetime "a year ago")
                      (-> (DateTime.)
                          (.minusYears 1))))
  (is (within-one-sec (parsedatetime "yesterday 11:45pm")
                      (-> (DateTime.)
                          (.minusDays 1)
                          (.withHourOfDay 23)
                          (.withMinuteOfHour 45)
                          (.withSecondOfMinute 0)
                          (.withMillisOfSecond 0))))

  (comment (is (within-one-sec (parsedatetime "may 27" (-> (DateTime.)
                                                   (.withMonthOfYear 7)))
                       (-> (DateTime.)
                           (.withMonthOfYear 5)
                           (.withDayOfMonth 27)
                           (.withHourOfDay 0)
                           (.withMinuteOfHour 0)
                           (.withSecondOfMinute 0)
                           (.withMillisOfSecond 0))))))
